name: Deploy Lambda Application

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'eu-central-1'

jobs:
  cluster:
    name: Deploy stacks to AWS
    runs-on: ubuntu-latest
    # outputs:
    #   env-name: ${{ steps.env-name.outputs.environment }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region}}

    # - name: Configure environment name
    #   id: env-name
    #   env:
    #     REPO: ${{ github.repository }}
    #   run: |
    #     ENVIRONMENT=`echo $REPO | tr "/" "-"`
    #     echo "Environment name: $ENVIRONMENT"
    #     echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

    - name: Create ECR repository cluster
      id: ecr-cluster
      uses: aws-actions/aws-cloudformation-github-deploy@master
      with:
        name: proper-app-name-repository-cluster
        template: deploy/repository.yml
        no-fail-on-empty-changeset: "1"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: proper-app-name-repository
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . -f prod.Dockerfile
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy Lambda Cluster
      id: lambda-cluster
      uses: aws-actions/aws-cloudformation-github-deploy@master
      with:
        name: my-first-cluster-with-wrong-name
        template: deploy/lambda.yml
        no-fail-on-empty-changeset: "1"
        capabilities: CAPABILITY_NAMED_IAM
